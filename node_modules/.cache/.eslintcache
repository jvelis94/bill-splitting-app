[{"/Users/jvelis/code/jvelis94/bill-splitter/src/index.js":"1","/Users/jvelis/code/jvelis94/bill-splitter/src/App.js":"2","/Users/jvelis/code/jvelis94/bill-splitter/src/reportWebVitals.js":"3","/Users/jvelis/code/jvelis94/bill-splitter/src/components/IndividualItem.js":"4","/Users/jvelis/code/jvelis94/bill-splitter/src/components/GroupBill.js":"5","/Users/jvelis/code/jvelis94/bill-splitter/src/components/PersonalBill.js":"6","/Users/jvelis/code/jvelis94/bill-splitter/src/components/Tabs.js":"7","/Users/jvelis/code/jvelis94/bill-splitter/src/components/ItemForm.js":"8","/Users/jvelis/code/jvelis94/bill-splitter/src/components/Totals.js":"9"},{"size":500,"mtime":1630109101095,"results":"10","hashOfConfig":"11"},{"size":142,"mtime":1630111149119,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1630109101096,"results":"13","hashOfConfig":"11"},{"size":1024,"mtime":1630333716321,"results":"14","hashOfConfig":"11"},{"size":4705,"mtime":1630330379594,"results":"15","hashOfConfig":"11"},{"size":1331,"mtime":1630333701265,"results":"16","hashOfConfig":"11"},{"size":2255,"mtime":1630332965095,"results":"17","hashOfConfig":"11"},{"size":857,"mtime":1630331504339,"results":"18","hashOfConfig":"11"},{"size":892,"mtime":1630333978445,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1upqk04",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jvelis/code/jvelis94/bill-splitter/src/index.js",[],["41","42"],"/Users/jvelis/code/jvelis94/bill-splitter/src/App.js",[],"/Users/jvelis/code/jvelis94/bill-splitter/src/reportWebVitals.js",[],"/Users/jvelis/code/jvelis94/bill-splitter/src/components/IndividualItem.js",[],"/Users/jvelis/code/jvelis94/bill-splitter/src/components/GroupBill.js",["43","44","45"],"import { useEffect, useState, useRef } from \"react\"\nimport PersonalBill from \"./PersonalBill\"\nimport styles from \"./GroupBill.module.css\"\nimport SimpleTabs from \"./Tabs\"\nimport AddIcon from '@material-ui/icons/Add';\nimport RemoveIcon from '@material-ui/icons/Remove';\n\nconst initialState = []\n\nconst GroupBill = () => {\n    const [people, setPeople] = useState(initialState)\n    const [taxRate, setTaxRate] = useState(0.08875)\n    const [tipRate, setTipRate] = useState(.18)\n    const [currentId, setCurrentId] = useState(1)\n    const newPersonRef = useRef()\n\n    useEffect(() => {\n        const updatedPeople = people.map(person => {\n            let oldTip = person['tip']\n            let newTip = Math.round(100*(person['subtotal']) * tipRate)/100\n            person['tip'] = newTip\n            person['total'] = Math.round(100*(person['total'] - oldTip + newTip))/100\n            return person\n        })\n\n        setPeople(updatedPeople)\n\n    }, [tipRate])\n\n    const addItemToPerson = (name, price, personId) => {\n        console.log(`adding ${name} to person`)\n        let currentPersonIndex = people.findIndex(person => person.id === personId)\n        let currentPerson = people.filter(person => person.id === personId)\n        currentPerson[0]['items'].push({\n            name: name,\n            price: parseFloat(parseInt(price)),\n            qty: 1\n        })\n        updateTotals(currentPerson[0], currentPersonIndex, price)\n    }\n\n    const incrementItemQuantity = (item, personId) => {\n        let currentPersonIndex = people.findIndex(person => person.id === personId)\n        let currentPerson = people.filter(person => person.id === personId)\n        let updateItem = currentPerson[0]['items'].findIndex(el => el.name === item)\n        currentPerson[0]['items'][updateItem]['qty'] += 1\n        updateTotals(currentPerson[0], currentPersonIndex, currentPerson[0]['items'][updateItem]['price'])\n    }\n\n    const decrementItemQuantity = (item, personId) => {\n        let currentPersonIndex = people.findIndex(person => person.id === personId)\n        let currentPerson = people.filter(person => person.id === personId)\n        let updateItem = currentPerson[0]['items'].findIndex(el => el.name === item)\n        currentPerson[0]['items'][updateItem]['qty'] -= 1\n        updateTotals(currentPerson[0], currentPersonIndex, currentPerson[0]['items'][updateItem]['price'], \"minus\")\n     }\n\n\n    const incrementTaxRate = () => {\n        setTipRate(prevState => prevState += 0.01)\n    }\n\n    const decrementTaxRate = () => {\n        setTipRate(prevState => prevState -= 0.01)\n    }\n\n    const updateTotals = (person, personIndex, price, type=\"add\") => {\n        type ===\"add\" ? person['subtotal'] += parseFloat(parseInt(price)) : person['subtotal'] -= parseFloat(parseInt(price))\n        person['tax'] = Math.round(100*(person['subtotal']) * taxRate)/100\n        person['tip'] = Math.round(100*(person['subtotal']) * tipRate)/100\n        person['total'] = Math.round(100*(person['subtotal'] + person['tax'] + person['tip']))/100\n\n        setPeople(prevState => {\n            let newState = [...prevState]\n            newState[personIndex] = person\n            return newState\n        })\n    }\n\n    const handleNewPersonSubmit = (event) => {\n        event.preventDefault()\n        let newPerson = {\n            id: currentId,\n            name: newPersonRef.current.value,\n            items: [],\n            subtotal: 0,\n            tax: 0,\n            tip: 0,\n            total: 0\n        }\n        setPeople(prevState => [...prevState, newPerson])\n        setCurrentId(prevState => prevState +=1)\n        newPersonRef.current.value = \"\"\n    }\n     \n\n    return (\n        <>\n            <div style={{textAlign: 'center'}}>\n                <img src='./split_logo.png' alt='logo' style={{width: '50%'}}/>\n            </div>\n            <form onSubmit={handleNewPersonSubmit} className={styles.newPersonContainer}>\n                <input type=\"text\" name=\"name\" placeholder=\"add new person\" className={styles.formInputs} ref={newPersonRef} />\n                <input type=\"submit\" style={{display: 'none'}}/>\n            </form>\n\n            \n            <SimpleTabs \n                people={people} \n                addItemToPerson={addItemToPerson} \n                incrementItemQuantity={incrementItemQuantity}\n                decrementItemQuantity={decrementItemQuantity}\n            />\n\n            <div className={styles.centerActionItems}>\n                <h4>Tip:</h4>\n                <RemoveIcon onClick={decrementTaxRate} />\n                    {Math.round(tipRate*100)}%  \n                <AddIcon onClick={incrementTaxRate} />\n            </div>\n        </>\n    )\n}\n\nexport default GroupBill","/Users/jvelis/code/jvelis94/bill-splitter/src/components/PersonalBill.js",[],"/Users/jvelis/code/jvelis94/bill-splitter/src/components/Tabs.js",[],"/Users/jvelis/code/jvelis94/bill-splitter/src/components/ItemForm.js",["46"],"import { useState, useRef } from 'react'\nimport styles from './ItemForm.module.css'\n\nconst ItemForm = (props) => {\n    const nameRef = useRef()\n    const priceRef = useRef()\n\n    const handleFormSubmit = (event) => {\n        event.preventDefault()\n        props.addItemToPerson(nameRef.current.value, priceRef.current.value, props.personId)\n        nameRef.current.value = \"\"\n        priceRef.current.value = \"\"\n    }\n\n    return (\n        <form className={styles.formContainer} onSubmit={handleFormSubmit}>\n            <input type=\"text\" name=\"name\" placeholder=\"burger\" className={styles.formInputs} ref={nameRef} />    \n            <input type=\"text\" name=\"price\" placeholder=\"20\" className={styles.formInputs} ref={priceRef} />\n            <input type=\"submit\" value=\"Add\" className={styles.formSubmit}/>\n        </form>\n    )\n}\n\nexport default ItemForm","/Users/jvelis/code/jvelis94/bill-splitter/src/components/Totals.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":2,"column":8,"nodeType":"53","messageId":"54","endLine":2,"endColumn":20},{"ruleId":"51","severity":1,"message":"55","line":12,"column":21,"nodeType":"53","messageId":"54","endLine":12,"endColumn":31},{"ruleId":"56","severity":1,"message":"57","line":28,"column":8,"nodeType":"58","endLine":28,"endColumn":17,"suggestions":"59"},{"ruleId":"51","severity":1,"message":"60","line":1,"column":10,"nodeType":"53","messageId":"54","endLine":1,"endColumn":18},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'PersonalBill' is defined but never used.","Identifier","unusedVar","'setTaxRate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'people'. Either include it or remove the dependency array.","ArrayExpression",["63"],"'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"64","fix":"65"},"Update the dependencies array to be: [people, tipRate]",{"range":"66","text":"67"},[950,959],"[people, tipRate]"]